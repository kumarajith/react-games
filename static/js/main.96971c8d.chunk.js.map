{"version":3,"sources":["components/Minesweeper/Game.module.css","components/UI/SliderControls/Slider/Slider.module.css","components/UI/Button/Button.module.css","containers/Minesweeper/Minesweeper.module.css","components/UI/SliderControls/SliderControls.module.css","constants/constants.js","components/Minesweeper/Tile/Tile.js","components/Minesweeper/Game.js","components/UI/SliderControls/Slider/Slider.js","components/UI/Button/Button.js","components/UI/SliderControls/SliderControls.js","containers/Minesweeper/Minesweeper.js","App.js","serviceWorker.js","index.js","components/Minesweeper/Tile/Tile.module.css"],"names":["module","exports","GameRow","Container","Slider","Button","Success","Danger","Controls","TILE_STATUS","OPEN","CLOSED","FLAGGED","TILE_CLICK","LEFT","RIGHT","GAME_STATUS","IN_PROGRESS","WON","LOST","tile","props","text","status","react_default","a","createElement","className","classes","TileOpen","TileClosed","onClick","clicked","onContextMenu","dangerouslySetInnerHTML","__html","Game","directions","x","y","state","playing","tileStatus","firstClick","mines","width","height","mineCount","tileClickedHandler","event","id","preventDefault","_this","updatedTileStatus","map","arr","slice","updatedMines","newStatus","button","freeSpaces","moveInitialMines","setState","onGameOver","visited","Array","i","length","fill","openTiles","hasWonGame","gameWon","openCount","j","currentTile","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","direction","value","currentX","currentY","err","return","moveNearby","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","outer","moveMine","from","to","fromCount","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","fromX","fromY","toX","toY","this","mineLocations","Set","size","add","Math","floor","random","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","location","currentCount","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","reset","resetBoard","onMount","tiles","row","index","rowTiles","innerIndex","_this2","Tile","key","Component","slider","label","type","min","max","onChange","changeHandler","disabled","btnType","join","children","sliderControls","onSliderChangeHandler","maxMines","resetHandler","Modal","setAppElement","Minesweeper","modalIsOpen","gameState","customStyles","content","top","left","right","bottom","marginRight","transform","target","_this$setState","Object","defineProperty","parseInt","openModal","closeModal","gameOverHandler","gameWonHandler","lib_default","isOpen","onRequestClose","contentLabel","style","SliderControls","Minesweeper_Game","App","containers_Minesweeper_Minesweeper","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96971c8d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameRow\":\"Game_GameRow__3IZEd\",\"Container\":\"Game_Container__2LVVx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Slider_Container__MYFvm\",\"Slider\":\"Slider_Slider__3V0iA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1amcs\",\"Success\":\"Button_Success__1H3hH\",\"Danger\":\"Button_Danger__3UZGC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Minesweeper_Controls__2FiDI\",\"Container\":\"Minesweeper_Container__3k4L7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"SliderControls_Container__37PR5\"};","export const TILE_STATUS = {\r\n    OPEN: 0,\r\n    CLOSED: 1,\r\n    FLAGGED: 2\r\n}\r\n\r\nexport const TILE_CLICK = {\r\n    LEFT: 0,\r\n    RIGHT: 2\r\n}\r\n\r\nexport const GAME_STATUS = {\r\n    IN_PROGRESS: 'In Progress',\r\n    WON: 'You Win!',\r\n    LOST: 'Game Over'\r\n}","import React from 'react';\r\nimport classes from './Tile.module.css';\r\nimport {TILE_STATUS} from '../../../constants/constants';\r\n\r\nconst tile = (props) => {\r\n    let text = '';\r\n    if (props.status === TILE_STATUS.FLAGGED) {\r\n        text = '&#128681;';\r\n    } else if (props.status === TILE_STATUS.OPEN) {\r\n        if (props.text === - 1) {\r\n            text = '&#128163;';\r\n        } else if (props.text > 0) {\r\n            text = props.text;\r\n        }\r\n    }\r\n    return (<div \r\n        className={props.status === (TILE_STATUS.OPEN) ? classes.TileOpen : classes.TileClosed} \r\n        onClick={props.clicked}\r\n        onContextMenu={props.clicked}\r\n        dangerouslySetInnerHTML={{ __html: text}}>\r\n    </div>);\r\n}\r\n\r\nexport default tile;","import React, {Component} from 'react';\r\nimport Tile from './Tile/Tile'\r\nimport classes from './Game.module.css';\r\nimport {TILE_STATUS, TILE_CLICK} from '../../constants/constants';\r\nclass Game extends Component {\r\n    \r\n    directions = [\r\n        {x:-1,y:-1},\r\n        {x:-1,y:0},\r\n        {x:-1,y:1},\r\n        {x:0,y:-1},\r\n        {x:0,y:1},\r\n        {x:1,y:-1},\r\n        {x:1,y:0},\r\n        {x:1,y:1}\r\n    ]\r\n\r\n    state = {\r\n        playing: true,\r\n        tileStatus: null,\r\n        firstClick: true,\r\n        mines: null,\r\n        width: null,\r\n        height: null,\r\n        mineCount: null\r\n    }\r\n\r\n    resetBoard () {\r\n        var tileStatus = new Array(this.state.height);\r\n        var mines = new Array(this.state.height);\r\n        for (var i = 0; i < this.state.height; i++) {\r\n            tileStatus[i] = new Array(this.state.width).fill(TILE_STATUS.CLOSED);\r\n            mines[i] = new Array(this.state.width).fill(0);\r\n        }\r\n        const mineLocations = new Set();\r\n        while (mineLocations.size < this.state.mineCount) {\r\n            mineLocations.add(Math.floor(Math.random() * (this.state.width * this.state.height)));\r\n        }\r\n        for (let location of mineLocations) {\r\n            mines[Math.floor(location/this.state.width)][location%this.state.width] = -1;\r\n        }\r\n        for (i = 0; i < mines.length; i++) {\r\n            for (var j = 0; j < mines[i].length ; j++) {\r\n                if (mines[i][j] === -1) {\r\n                    continue;\r\n                }\r\n                let currentCount = 0;\r\n                for (let direction of this.directions) {\r\n                    let currentX = i + direction.x;\r\n                    let currentY = j + direction.y;\r\n                    if (currentX < 0 || currentX >= this.state.height || currentY < 0 || currentY >= this.state.width) {\r\n                        continue;\r\n                    }\r\n                    if (mines[currentX][currentY] === -1) {\r\n                        currentCount++;\r\n                    }\r\n                }\r\n                mines[i][j] = currentCount;\r\n            }\r\n        }\r\n        this.setState({tileStatus:tileStatus, mines: mines, playing: true});\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.reset) {\r\n            return {\r\n                tileStatus: null, \r\n                mines: null, \r\n                playing: false, \r\n                width: props.width, \r\n                height: props.height, \r\n                mineCount: props.mineCount,\r\n                firstClick: true\r\n            }\r\n        }\r\n        return state;\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        if (!this.props.reset) {\r\n            return;\r\n        }\r\n        this.resetBoard();\r\n        this.props.onMount();\r\n    }\r\n\r\n    tileClickedHandler = (event, id) => {\r\n        event.preventDefault();\r\n        if (!this.state.playing) {\r\n            return;\r\n        }\r\n        let updatedTileStatus = this.state.tileStatus.map(function(arr) {\r\n            return arr.slice();\r\n        });\r\n        let updatedMines = this.state.mines.map(function(arr) {\r\n            return arr.slice();\r\n        });\r\n        let status = updatedTileStatus[id.x][id.y];\r\n        let newStatus = status;\r\n        if (status === TILE_STATUS.CLOSED) {\r\n            if (event.button === TILE_CLICK.LEFT) {\r\n                if (this.state.firstClick) {\r\n                    let freeSpaces = (this.props.width * this.props.height) - this.props.mineCount;\r\n                    updatedMines = this.moveInitialMines(updatedMines, id, freeSpaces >= 9);\r\n                }\r\n                newStatus = TILE_STATUS.OPEN;\r\n                if (updatedMines[id.x][id.y] === -1) {\r\n                    this.setState({playing: false});\r\n                    this.props.onGameOver();\r\n                } else {\r\n                    var visited = new Array(this.state.height);\r\n                    for (var i = 0; i < visited.length; i++) {\r\n                        visited[i] = new Array(this.state.width).fill(false);\r\n                    }\r\n                    updatedTileStatus = this.openTiles(id, updatedTileStatus, visited, updatedMines);\r\n                }\r\n            } else if (event.button === TILE_CLICK.RIGHT) {\r\n                newStatus = TILE_STATUS.FLAGGED;\r\n            }\r\n        } else if (status === TILE_STATUS.FLAGGED) {\r\n            if (event.button === TILE_CLICK.RIGHT) {\r\n                newStatus = TILE_STATUS.CLOSED\r\n            }\r\n        }\r\n        updatedTileStatus[id.x][id.y] = newStatus;\r\n        this.setState({tileStatus: updatedTileStatus, mines: updatedMines, firstClick: false});\r\n        if (this.hasWonGame(updatedTileStatus, updatedMines)) {\r\n            this.setState({playing: false});\r\n            this.props.gameWon();\r\n        }\r\n    }\r\n    \r\n    hasWonGame = (tileStatus, mines) => {\r\n        var openCount = 0;\r\n        for (var i = 0; i < tileStatus.length; i++) {\r\n            for (var j = 0; j < tileStatus[i].length; j++) {\r\n                if (mines[i][j] !== -1 && tileStatus[i][j] === TILE_STATUS.OPEN) {\r\n                    openCount++;\r\n                }\r\n            }\r\n        }\r\n        if ((openCount + this.state.mineCount) === (this.state.width * this.state.height)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    openTiles = (id, tileStatus, visited, mines) => {\r\n        if (visited[id.x][id.y]) {\r\n            return tileStatus;\r\n        }\r\n        visited[id.x][id.y] = true;\r\n        var currentTile = mines[id.x][id.y];\r\n        for (let direction of this.directions) {\r\n            let currentX = id.x + direction.x;\r\n            let currentY = id.y + direction.y;\r\n            if (currentX < 0 || currentX >= this.state.height || currentY < 0 || currentY >= this.state.width) {\r\n                continue;\r\n            }\r\n            if (currentTile > 0) {\r\n                if (mines[currentX][currentY] === 0) {\r\n                    tileStatus[currentX][currentY] = TILE_STATUS.OPEN;\r\n                    tileStatus = this.openTiles({x:currentX, y:currentY}, tileStatus, visited, mines)\r\n                }\r\n            } else if (currentTile === 0) {\r\n                if (mines[currentX][currentY] >= 0) {\r\n                    tileStatus[currentX][currentY] = TILE_STATUS.OPEN;\r\n                    tileStatus = this.openTiles({x:currentX, y:currentY}, tileStatus, visited, mines)\r\n                }\r\n            }\r\n        }\r\n        \r\n        return tileStatus;\r\n    }\r\n\r\n    moveInitialMines = (mines, id, moveNearby) => {\r\n        if (moveNearby) {\r\n            for (let direction of this.directions) {\r\n                let currentX = id.x + direction.x;\r\n                let currentY = id.y + direction.y;\r\n                if (currentX < 0 || currentX >= this.state.height || currentY < 0 || currentY >= this.state.width) {\r\n                    continue;\r\n                }\r\n\r\n                if (mines[currentX][currentY] !== -1) {\r\n                    continue;\r\n                }\r\n\r\n                outer:\r\n                for (let i = 0; i < mines.length; i++) {\r\n                    for (let j = 0; j < mines[i].length; j++) {\r\n                        if ((i >= id.x-1 && i <= id.x+1) && (j >= id.y-1 && j <= id.y+1)) {\r\n                            continue;\r\n                        }\r\n                        if (mines[i][j] !== -1) {\r\n                            mines = this.moveMine(mines, {x: currentX, y:currentY}, {x: i, y: j});\r\n                            break outer;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (mines[id.x][id.y] === -1) {\r\n            for (let i = 0; i < mines.length; i++) {\r\n                for (let j = 0; j < mines[i].length; j++) {\r\n                    if (moveNearby) {\r\n                        if ((i >= id.x-1 && i <= id.x+1) && (j >= id.y-1 && j <= id.y+1)) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    if (mines[i][j] !== -1) {\r\n                        mines = this.moveMine(mines, id, {x: i, y: j});\r\n                        return mines;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return mines;\r\n    }\r\n\r\n    moveMine = (mines, from, to) => {\r\n        let fromCount = 0;\r\n        mines[from.x][from.y] = 0;\r\n        mines[to.x][to.y] = -1;\r\n        for (let direction of this.directions) {\r\n            let fromX = from.x + direction.x;\r\n            let fromY = from.y + direction.y;\r\n            if (!(fromX < 0 || fromX >= this.state.height || fromY < 0 || fromY >= this.state.width)) {\r\n                let fromMine = mines[fromX][fromY];\r\n                if (fromMine === -1) {\r\n                    fromCount++;\r\n                } else {\r\n                    mines[fromX][fromY]--;\r\n                }\r\n            }\r\n            let toX = to.x + direction.x;\r\n            let toY = to.y + direction.y;\r\n            if (!(toX < 0 || toX >= this.state.height || toY < 0 || toY >= this.state.width)) {\r\n                let toMine = mines[toX][toY];\r\n                if (toMine !== -1) {\r\n                    mines[toX][toY]++;\r\n                }\r\n            }\r\n        }\r\n        mines[from.x][from.y] = fromCount;\r\n        return mines;\r\n    }\r\n\r\n    render () {\r\n        var tiles = null;\r\n        if (this.state.tileStatus !== null) {\r\n            tiles = this.state.tileStatus.map(function(row, index) {\r\n                let rowTiles = row.map(function(tile, innerIndex) {\r\n                    return <Tile \r\n                    key = {index + \"_\" + innerIndex}\r\n                    clicked={(event) => this.tileClickedHandler(event, {x:index,y:innerIndex})} \r\n                    text={this.state.mines[index][innerIndex]}\r\n                    status={tile}/>;\r\n                }, this);\r\n                return <div \r\n                    key = {index}\r\n                    className={classes.GameRow}>{rowTiles}</div>;\r\n            }, this);\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Container}>\r\n                {tiles}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport classes from './Slider.module.css';\r\n\r\nconst slider = (props) => {\r\n    return (\r\n        <div className={classes.Container}>\r\n            <p>{props.label} : {props.value}</p>\r\n            <input className={classes.Slider} type=\"range\" min={props.min} max={props.max} value={props.value} onChange={props.changeHandler}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default slider;","import React from 'react';\n\nimport classes from './Button.module.css';\n\nconst button = (props) => (\n    <button\n        disabled={props.disabled}\n        className={[classes.Button, classes[props.btnType]].join(' ')}\n        onClick={props.clicked}>{props.children}</button>\n);\n\nexport default button;","import React from 'react';\r\nimport Slider from './Slider/Slider';\r\nimport Button from '../Button/Button';\r\nimport classes from './SliderControls.module.css';\r\n\r\nconst sliderControls = (props) => {\r\n    return (\r\n        <div className={classes.Container}>\r\n            <Slider \r\n                label=\"Height\"\r\n                min={props.min}\r\n                max={props.max}\r\n                value={props.height}\r\n                changeHandler={(event) => props.onSliderChangeHandler(event, 'height')}\r\n            />\r\n            <Slider \r\n                label=\"Width\"\r\n                min={props.min}\r\n                max={props.max}\r\n                value={props.width}\r\n                changeHandler={(event) => props.onSliderChangeHandler(event, 'width')}\r\n            />\r\n            <Slider \r\n                label=\"Mines\"\r\n                min={props.min}\r\n                max={props.maxMines}\r\n                value={props.mines}\r\n                changeHandler={(event) => props.onSliderChangeHandler(event, 'mines')}\r\n            />\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.resetHandler}>Play</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default sliderControls;","import React, {Component} from 'react';\r\nimport Game from '../../components/Minesweeper/Game';\r\nimport SliderControls from '../../components/UI/SliderControls/SliderControls';\r\nimport classes from './Minesweeper.module.css';\r\nimport Modal from 'react-modal';\r\nimport {GAME_STATUS} from '../../constants/constants';\r\nModal.setAppElement('#root');\r\n\r\nclass Minesweeper extends Component {\r\n    state = {\r\n        min: 2,\r\n        max: 100,\r\n        maxMines: 99,\r\n        height: 5,\r\n        width: 5,\r\n        mines: 10,\r\n        reset: true,\r\n        modalIsOpen: true,\r\n        gameState: GAME_STATUS.IN_PROGRESS\r\n    }\r\n\r\n    customStyles = {\r\n        content : {\r\n            top                   : '50%',\r\n            left                  : '50%',\r\n            right                 : 'auto',\r\n            bottom                : 'auto',\r\n            marginRight           : '-50%',\r\n            transform             : 'translate(-50%, -50%)'\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({maxMines: (this.state.height * this.state.width) - 1})\r\n    }\r\n\r\n    onSliderChangeHandler = (event, type) => {\r\n        if (type === 'mines') {\r\n            var max = Math.min(event.target.value, this.state.maxMines);\r\n            this.setState({mines: max});\r\n        } else {\r\n            var maxMines = (event.target.value * (type === 'height' ? this.state.width : this.state.height)) - 1;\r\n            var mines = Math.min(this.state.mines, maxMines);\r\n            this.setState({[type]: parseInt(event.target.value, 10), maxMines: maxMines, mines: mines});\r\n        }\r\n    }\r\n\r\n    resetHandler = (status) => {\r\n        this.setState({reset: status});\r\n        if (status) {\r\n            this.setState({gameState: GAME_STATUS.IN_PROGRESS});\r\n        }\r\n    }\r\n\r\n    openModal = () => {\r\n        this.setState({modalIsOpen: true});\r\n    }\r\n     \r\n    closeModal = () => {\r\n        this.setState({modalIsOpen: false});\r\n    }\r\n\r\n    gameOverHandler = () => {\r\n        this.setState({gameState: GAME_STATUS.LOST, modalIsOpen: true});\r\n    }\r\n\r\n    gameWonHandler = () => {\r\n        this.setState({gameState: GAME_STATUS.WON, modalIsOpen: true});\r\n    }\r\n\r\n    render () {\r\n        var text = this.state.gameState;\r\n        text = text === GAME_STATUS.IN_PROGRESS ? \"Welcome to minesweeper\" : text;\r\n        return (\r\n            <div className={classes.Container}>\r\n                <Modal\r\n                    isOpen={this.state.modalIsOpen}\r\n                    onRequestClose={this.closeModal}\r\n                    contentLabel=\"Modal\"\r\n                    style={this.customStyles}>\r\n                    {text}\r\n                </Modal>\r\n                <div className={classes.Controls}>\r\n                    <h1>Minesweeper</h1>\r\n                    <SliderControls\r\n                        min={this.state.min}\r\n                        max={this.state.max}\r\n                        height={this.state.height}\r\n                        width={this.state.width}\r\n                        mines={this.state.mines}\r\n                        maxMines={this.state.maxMines}\r\n                        onSliderChangeHandler={this.onSliderChangeHandler}\r\n                        resetHandler={() => this.resetHandler(true)}/>\r\n                </div>\r\n                <Game\r\n                    reset={this.state.reset}\r\n                    onMount={() => this.resetHandler(false)}\r\n                    width={this.state.width}\r\n                    height={this.state.height}\r\n                    mineCount={this.state.mines}\r\n                    onGameOver={this.gameOverHandler}\r\n                    gameWon={this.gameWonHandler}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Minesweeper;","import React from 'react';\nimport Minesweeper from './containers/Minesweeper/Minesweeper';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Minesweeper></Minesweeper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TileClosed\":\"Tile_TileClosed__-bC1y\",\"TileOpen\":\"Tile_TileOpen__2t-hC\"};"],"sourceRoot":""}