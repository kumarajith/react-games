{"version":3,"sources":["components/Minesweeper/Game.module.css","components/UI/SliderControls/Slider/Slider.module.css","components/UI/Button/Button.module.css","containers/Minesweeper/Minesweeper.module.css","components/UI/SliderControls/SliderControls.module.css","constants/constants.js","components/Minesweeper/Tile/Tile.js","components/Minesweeper/Game.js","components/UI/SliderControls/Slider/Slider.js","components/UI/Button/Button.js","components/UI/SliderControls/SliderControls.js","containers/Minesweeper/Minesweeper.js","App.js","serviceWorker.js","index.js","components/Minesweeper/Tile/Tile.module.css"],"names":["module","exports","GameRow","Container","Slider","Button","Success","Danger","Controls","MINE_STATUS","OPEN","CLOSED","FLAGGED","MINE_CLICK","LEFT","RIGHT","GAME_STATUS","IN_PROGRESS","WON","LOST","tile","props","text","status","react_default","a","createElement","className","classes","TileOpen","TileClosed","onClick","clicked","onContextMenu","dangerouslySetInnerHTML","__html","Game","directions","x","y","state","playing","tileStatus","mines","width","height","mineCount","tileClickedHandler","event","id","preventDefault","_this","updatedTileStatus","map","arr","slice","newStatus","button","setState","onGameOver","visited","Array","i","length","fill","updateStatuses","hasWonGame","gameWon","openCount","j","currentTile","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","direction","value","currentX","currentY","err","return","this","mineLocations","Set","size","add","Math","floor","random","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","location","currentCount","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","console","log","reset","resetBoard","onMount","tiles","row","index","rowTiles","innerIndex","_this2","Tile","key","Component","slider","label","type","min","max","onChange","changeHandler","disabled","btnType","join","children","sliderControls","onSliderChangeHandler","maxMines","resetHandler","Modal","setAppElement","Minesweeper","modalIsOpen","gameState","customStyles","content","top","left","right","bottom","marginRight","transform","_this$setState","Object","defineProperty","parseInt","target","openModal","closeModal","gameOverHandler","gameWonHandler","lib_default","isOpen","onRequestClose","contentLabel","style","SliderControls","Minesweeper_Game","App","containers_Minesweeper_Minesweeper","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c639970a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameRow\":\"Game_GameRow__3IZEd\",\"Container\":\"Game_Container__2LVVx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Slider_Container__MYFvm\",\"Slider\":\"Slider_Slider__3V0iA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1amcs\",\"Success\":\"Button_Success__1H3hH\",\"Danger\":\"Button_Danger__3UZGC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Minesweeper_Controls__2FiDI\",\"Container\":\"Minesweeper_Container__3k4L7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"SliderControls_Container__37PR5\"};","export const MINE_STATUS = {\r\n    OPEN: 0,\r\n    CLOSED: 1,\r\n    FLAGGED: 2\r\n}\r\n\r\nexport const MINE_CLICK = {\r\n    LEFT: 0,\r\n    RIGHT: 2\r\n}\r\n\r\nexport const GAME_STATUS = {\r\n    IN_PROGRESS: 'In Progress',\r\n    WON: 'You Win!',\r\n    LOST: 'Game Over'\r\n}","import React from 'react';\r\nimport classes from './Tile.module.css';\r\nimport {MINE_STATUS} from '../../../constants/constants';\r\n\r\nconst tile = (props) => {\r\n    let text = '';\r\n    if (props.status === MINE_STATUS.FLAGGED) {\r\n        text = '&#128681;';\r\n    } else if (props.status === MINE_STATUS.OPEN) {\r\n        if (props.text === - 1) {\r\n            text = '&#128163;';\r\n        } else if (props.text > 0) {\r\n            text = props.text;\r\n        }\r\n    }\r\n    return (<div \r\n        className={props.status === (MINE_STATUS.OPEN) ? classes.TileOpen : classes.TileClosed} \r\n        onClick={props.clicked}\r\n        onContextMenu={props.clicked}\r\n        dangerouslySetInnerHTML={{ __html: text}}>\r\n    </div>);\r\n}\r\n\r\nexport default tile;","import React, {Component} from 'react';\r\nimport Tile from './Tile/Tile'\r\nimport classes from './Game.module.css';\r\nimport {MINE_STATUS, MINE_CLICK} from '../../constants/constants';\r\nclass Game extends Component {\r\n    \r\n    directions = [\r\n        {x:-1,y:-1},\r\n        {x:-1,y:0},\r\n        {x:-1,y:1},\r\n        {x:0,y:-1},\r\n        {x:0,y:1},\r\n        {x:1,y:-1},\r\n        {x:1,y:0},\r\n        {x:1,y:1}\r\n    ]\r\n\r\n    state = {\r\n        playing: true,\r\n        tileStatus: null,\r\n        mines: null,\r\n        width: null,\r\n        height: null,\r\n        mineCount: null\r\n    }\r\n\r\n    resetBoard () {\r\n        var tileStatus = new Array(this.state.height);\r\n        var mines = new Array(this.state.height);\r\n        for (var i = 0; i < this.state.height; i++) {\r\n            tileStatus[i] = new Array(this.state.width).fill(MINE_STATUS.CLOSED);\r\n            mines[i] = new Array(this.state.width).fill(0);\r\n        }\r\n        const mineLocations = new Set();\r\n        while (mineLocations.size < this.state.mineCount) {\r\n            mineLocations.add(Math.floor(Math.random() * (this.state.width * this.state.height)));\r\n        }\r\n        for (let location of mineLocations) {\r\n            mines[Math.floor(location/this.state.width)][location%this.state.width] = -1;\r\n        }\r\n        for (i = 0; i < mines.length; i++) {\r\n            for (var j = 0; j < mines[i].length ; j++) {\r\n                if (mines[i][j] === -1) {\r\n                    continue;\r\n                }\r\n                let currentCount = 0;\r\n                for (let direction of this.directions) {\r\n                    let currentX = i + direction.x;\r\n                    let currentY = j + direction.y;\r\n                    if (currentX < 0 || currentX >= this.state.height || currentY < 0 || currentY >= this.state.width) {\r\n                        continue;\r\n                    }\r\n                    if (mines[currentX][currentY] === -1) {\r\n                        currentCount++;\r\n                    }\r\n                }\r\n                mines[i][j] = currentCount;\r\n            }\r\n        }\r\n        console.log(mines);\r\n        this.setState({tileStatus:tileStatus, mines: mines, playing: true});\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.reset) {\r\n            return {\r\n                tileStatus: null, \r\n                mines: null, \r\n                playing: false, \r\n                width: props.width, \r\n                height: props.height, \r\n                mineCount: props.mineCount\r\n            }\r\n        }\r\n        return state;\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        if (!this.props.reset) {\r\n            return;\r\n        }\r\n        this.resetBoard();\r\n        this.props.onMount();\r\n    }\r\n\r\n    tileClickedHandler = (event, id) => {\r\n        event.preventDefault();\r\n        if (!this.state.playing) {\r\n            return;\r\n        }\r\n        let updatedTileStatus = this.state.tileStatus.map(function(arr) {\r\n            return arr.slice();\r\n        });\r\n        let status = updatedTileStatus[id.x][id.y];\r\n        let newStatus = status;\r\n        if (status === MINE_STATUS.CLOSED) {\r\n            if (event.button === MINE_CLICK.LEFT) {\r\n                newStatus = MINE_STATUS.OPEN;\r\n                if (this.state.mines[id.x][id.y] === -1) {\r\n                    this.setState({playing: false});\r\n                    this.props.onGameOver();\r\n                } else {\r\n                    var visited = new Array(this.state.height);\r\n                    for (var i = 0; i < visited.length; i++) {\r\n                        visited[i] = new Array(this.state.width).fill(false);\r\n                    }\r\n                    updatedTileStatus = this.updateStatuses(id, updatedTileStatus, visited);\r\n                }\r\n            } else if (event.button === MINE_CLICK.RIGHT) {\r\n                newStatus = MINE_STATUS.FLAGGED;\r\n            }\r\n        } else if (status === MINE_STATUS.FLAGGED) {\r\n            if (event.button === MINE_CLICK.RIGHT) {\r\n                newStatus = MINE_STATUS.CLOSED\r\n            }\r\n        }\r\n        updatedTileStatus[id.x][id.y] = newStatus;\r\n        this.setState({tileStatus: updatedTileStatus});\r\n        if (this.hasWonGame(updatedTileStatus)) {\r\n            this.setState({playing: false});\r\n            this.props.gameWon();\r\n        }\r\n    }\r\n    hasWonGame = (tileStatus) => {\r\n        var openCount = 0;\r\n        for (var i = 0; i < tileStatus.length; i++) {\r\n            for (var j = 0; j < tileStatus[i].length; j++) {\r\n                if (this.state.mines[i][j] !== -1 && tileStatus[i][j] === MINE_STATUS.OPEN) {\r\n                    openCount++;\r\n                }\r\n            }\r\n        }\r\n        if ((openCount + this.state.mineCount) === (this.state.width * this.state.height)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    updateStatuses = (id, tileStatus, visited) => {\r\n        if (visited[id.x][id.y]) {\r\n            return tileStatus;\r\n        }\r\n        visited[id.x][id.y] = true;\r\n        var currentTile = this.state.mines[id.x][id.y];\r\n        for (let direction of this.directions) {\r\n            if (direction.x === 0 && direction.y === 0) {\r\n                continue;\r\n            }\r\n            let currentX = id.x + direction.x;\r\n            let currentY = id.y + direction.y;\r\n            if (currentX < 0 || currentX >= this.state.height || currentY < 0 || currentY >= this.state.width) {\r\n                continue;\r\n            }\r\n            if (currentTile > 0) {\r\n                if (this.state.mines[currentX][currentY] === 0) {\r\n                    tileStatus[currentX][currentY] = MINE_STATUS.OPEN;\r\n                    tileStatus = this.updateStatuses({x:currentX, y:currentY}, tileStatus, visited)\r\n                }\r\n            } else if (currentTile === 0) {\r\n                if (this.state.mines[currentX][currentY] >= 0) {\r\n                    tileStatus[currentX][currentY] = MINE_STATUS.OPEN;\r\n                    tileStatus = this.updateStatuses({x:currentX, y:currentY}, tileStatus, visited)\r\n                }\r\n            }\r\n        }\r\n        \r\n        return tileStatus;\r\n    }\r\n\r\n    render () {\r\n        var tiles = null;\r\n        if (this.state.tileStatus !== null) {\r\n            tiles = this.state.tileStatus.map(function(row, index) {\r\n                let rowTiles = row.map(function(tile, innerIndex) {\r\n                    return <Tile \r\n                    key = {index + \"_\" + innerIndex}\r\n                    clicked={(event) => this.tileClickedHandler(event, {x:index,y:innerIndex})} \r\n                    text={this.state.mines[index][innerIndex]}\r\n                    status={tile}/>;\r\n                }, this);\r\n                return <div \r\n                    key = {index}\r\n                    className={classes.GameRow}>{rowTiles}</div>;\r\n            }, this);\r\n        }\r\n        // var tiles = <Tile \r\n        //     clicked={(event) => this.tileClickedHandler(event, {x:0,y:index})} \r\n        //     text='&#128681;'\r\n        //     status={this.state.tileStatus[0][0]}/>;\r\n\r\n        return (\r\n            <div className={classes.Container}>\r\n                {tiles}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport classes from './Slider.module.css';\r\n\r\nconst slider = (props) => {\r\n    return (\r\n        <div className={classes.Container}>\r\n            <p>{props.label} : {props.value}</p>\r\n            <input className={classes.Slider} type=\"range\" min={props.min} max={props.max} value={props.value} onChange={props.changeHandler}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default slider;","import React from 'react';\n\nimport classes from './Button.module.css';\n\nconst button = (props) => (\n    <button\n        disabled={props.disabled}\n        className={[classes.Button, classes[props.btnType]].join(' ')}\n        onClick={props.clicked}>{props.children}</button>\n);\n\nexport default button;","import React from 'react';\r\nimport Slider from './Slider/Slider';\r\nimport Button from '../Button/Button';\r\nimport classes from './SliderControls.module.css';\r\n\r\nconst sliderControls = (props) => {\r\n    return (\r\n        <div className={classes.Container}>\r\n            <Slider \r\n                label=\"Height\"\r\n                min={props.min}\r\n                max={props.max}\r\n                value={props.height}\r\n                changeHandler={(event) => props.onSliderChangeHandler(event, 'height')}\r\n            />\r\n            <Slider \r\n                label=\"Width\"\r\n                min={props.min}\r\n                max={props.max}\r\n                value={props.width}\r\n                changeHandler={(event) => props.onSliderChangeHandler(event, 'width')}\r\n            />\r\n            <Slider \r\n                label=\"Mines\"\r\n                min={props.min}\r\n                max={props.maxMines}\r\n                value={props.mines}\r\n                changeHandler={(event) => props.onSliderChangeHandler(event, 'mines')}\r\n            />\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.resetHandler}>Play</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default sliderControls;","import React, {Component} from 'react';\r\nimport Game from '../../components/Minesweeper/Game';\r\nimport SliderControls from '../../components/UI/SliderControls/SliderControls';\r\nimport classes from './Minesweeper.module.css';\r\nimport Modal from 'react-modal';\r\nimport {GAME_STATUS} from '../../constants/constants';\r\nModal.setAppElement('#root');\r\n\r\nclass Minesweeper extends Component {\r\n    state = {\r\n        min: 1,\r\n        max: 100,\r\n        maxMines: 99,\r\n        height: 5,\r\n        width: 5,\r\n        mines: 24,\r\n        reset: true,\r\n        modalIsOpen: true,\r\n        gameState: GAME_STATUS.IN_PROGRESS\r\n    }\r\n\r\n    customStyles = {\r\n        content : {\r\n            top                   : '50%',\r\n            left                  : '50%',\r\n            right                 : 'auto',\r\n            bottom                : 'auto',\r\n            marginRight           : '-50%',\r\n            transform             : 'translate(-50%, -50%)'\r\n        }\r\n    };\r\n\r\n    onSliderChangeHandler = (event, type) => {\r\n        this.setState({[type]: parseInt(event.target.value, 10), maxMines: ((this.state.height * this.state.width) - 1)});\r\n        if (this.state.mines > this.state.maxMines) {\r\n            this.setState({mines: this.state.maxMines});\r\n        }\r\n    }\r\n\r\n    resetHandler = (status) => {\r\n        this.setState({reset: status});\r\n        if (status) {\r\n            this.setState({gameState: GAME_STATUS.IN_PROGRESS});\r\n        }\r\n    }\r\n\r\n    openModal = () => {\r\n        this.setState({modalIsOpen: true});\r\n    }\r\n     \r\n    closeModal = () => {\r\n        this.setState({modalIsOpen: false});\r\n    }\r\n\r\n    gameOverHandler = () => {\r\n        this.setState({gameState: GAME_STATUS.LOST, modalIsOpen: true});\r\n    }\r\n\r\n    gameWonHandler = () => {\r\n        this.setState({gameState: GAME_STATUS.WON, modalIsOpen: true});\r\n    }\r\n\r\n    render () {\r\n        var text = this.state.gameState;\r\n        text = text === GAME_STATUS.IN_PROGRESS ? \"Welcome to minesweeper\" : text;\r\n        return (\r\n            <div className={classes.Container}>\r\n                <Modal\r\n                    isOpen={this.state.modalIsOpen}\r\n                    onRequestClose={this.closeModal}\r\n                    contentLabel=\"Modal\"\r\n                    style={this.customStyles}>\r\n                    {text}\r\n                </Modal>\r\n                <div className={classes.Controls}>\r\n                    <h1>Minesweeper</h1>\r\n                    <SliderControls\r\n                        min={this.state.min}\r\n                        max={this.state.max}\r\n                        height={this.state.height}\r\n                        width={this.state.width}\r\n                        mines={this.state.mines}\r\n                        maxMines={this.state.maxMines}\r\n                        onSliderChangeHandler={this.onSliderChangeHandler}\r\n                        resetHandler={() => this.resetHandler(true)}/>\r\n                </div>\r\n                <Game\r\n                    reset={this.state.reset}\r\n                    onMount={() => this.resetHandler(false)}\r\n                    width={this.state.width}\r\n                    height={this.state.height}\r\n                    mineCount={this.state.mines}\r\n                    onGameOver={this.gameOverHandler}\r\n                    gameWon={this.gameWonHandler}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Minesweeper;","import React from 'react';\nimport Minesweeper from './containers/Minesweeper/Minesweeper';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Minesweeper></Minesweeper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TileClosed\":\"Tile_TileClosed__-bC1y\",\"TileOpen\":\"Tile_TileOpen__2t-hC\"};"],"sourceRoot":""}